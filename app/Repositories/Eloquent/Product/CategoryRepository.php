<?php

namespace App\Repositories\Eloquent\Product;


use App\Models\Product\Category;
use App\Repositories\Interfaces\Product\categoryRepositoryInterface;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;
use App\Repositories\Eloquent\BaseRepository;

class CategoryRepository extends BaseRepository implements categoryRepositoryInterface
{



    public function __construct(Category $model)
    {
        parent::__construct($model);
    }

    public function create( array $data ) {
    	if(!isset($data['slug']) || !$data['slug']){
    		$data['slug']=str_slug($data['name']);
	    }
	    return parent::create( $data ); // TODO: Change the autogenerated stub
    }

    public function updateBy( array $data, $value = null, $field = 'id' ) {
	    if(!isset($data['slug']) || !$data['slug']){
		    $data['slug']=str_slug($data['name']);
	    }
	    return parent::updateBy( $data, $value, $field ); // TODO: Change the autogenerated stub
    }

	public function hasEquipmentOrCategories($id){

        $isParent = DB::table('categories')->where('parent_id',$id)->count();

        $hasEquipment = DB::table('category_equipment')->where('category_id',$id)->count();

        if($isParent > 0 || $hasEquipment > 0)
            return true;
        else
            return false;
    }

    public function findOneBySlug( $slug, $separator='-' ) {
	    $slug=strtolower(strval($slug));
	    $name_from_slug = str_replace($separator,' ',$slug);

	    $this->query->where(DB::raw('lower(slug)'),$slug)->orWhere(function($query) use ($name_from_slug){
	    	$query->where('slug',null)->where(DB::raw('lower(trim(name))'),$name_from_slug);
	    });

	    return $this->first();
    }

    public function generateCategoryOrderedList() {
    	$this->active();
    	$categories = $this->query->withCount(['equipments'])->orderBy('parent_id')->orderBy('name')->get();
	    $categories=$categories->groupBy('parent_id')->toArray();
		$out=[];
        foreach ($categories[""] as &$category){
        	$this->accumulateEquipmentsRecursively($categories,$category,$out);
        }

		$this->resetScope();
	    return $out;
    }

    private function accumulateEquipmentsRecursively($map,& $category, & $out,$max_level=5,$current_level=0){
    	if ($current_level>=$max_level){
    		return; //too deep to continue
	    }
		if(isset($category['subcategories_items'])){
    		return; //already mapped dont do anything
		}
		$accum=$category['equipments_count'];
	    $category['subcategories_ids']=[$category['id']];
	    if(!isset($out[$category['parent_id']])){
		    $out[$category['parent_id']]=[];
	    }

		if(isset($map[$category['id']])){
    	    foreach ($map[$category['id']] as &$value){
    	    	$this->accumulateEquipmentsRecursively($map,$value,$out,$max_level,$current_level+1);
    	    	$accum+=$value['subcategories_items'];
    	    	foreach ($value['subcategories_ids'] as $subcategory_id){
    	    		if(!in_array($subcategory_id,$category['subcategories_ids'])){
    	    			$category['subcategories_ids'][]=$subcategory_id;
			        }
		        }
	        }

	    }

		$category['subcategories_items']=$accum;
	    array_push($out[$category['parent_id']],$category);
    }

	public function generateCategoryAvailableOrderedList($lat,$lon,$radius,$country_id=null) {
		$categories = $this->query->orderBy('parent_id')->orderBy('name')->get();
		$categories=$categories->groupBy('parent_id')->toArray();


		foreach ($categories[""] as &$category){
			$this->accumulateEquipmentsRecursively($categories,$category);
		}
		$this->resetScope();
		return $categories;
	}

	function active() {
		$this->query->active();
		return $this;
	}

}