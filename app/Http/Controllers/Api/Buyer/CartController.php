<?php

namespace App\Http\Controllers\Api\Buyer;

use App\Http\Requests\Buyer\Cart\itemRequest;
use App\Http\Resources\Product\EquipmentResource;
use App\Models\Product\Equipment;
use App\Repositories\Interfaces\Buyer\cartRepositoryInterface;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;

/**
 * Class CartController
 * @package App\Http\Controllers\Api\Buyer
 *
 *
 */
class CartController extends Controller
{

	protected $cart_repository;
	public function __construct(cartRepositoryInterface $cart_repository) {
    
		$this->cart_repository=$cart_repository;

	}

	/**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
	 *
	 * @SWG\Get(
	 *     path="/api/cart",
	 *     summary="return the list of equipment in the current constractor's shopping cart",
	 *     produces={"application/json"},
	 *     tags={"order"},
	 *     @SWG\Parameter(
	 *          in="header",
	 *          name="Authorization",
	 *          description ="the authentication token generated by the app",
	 *          required=true,
	 *          type="string"
	 *      ),
	 *     @SWG\Response(
	 *          response=200,
	 *          description="the list of equipment on the chart",
	 *          @SWG\Schema(
	 *              type="object",
	 *              @SWG\Property(property="data",type="array",items=@SWG\Items(ref="#/definitions/equipment_response_object"))
	 *          )
	 *      )
	 *
	 * )
	 *
     */
    public function index(Request $request)
    {
      
    	$cart_items = $this->cart_repository->getProductList(Auth::user()->id);
		return response()->json(['data'=>EquipmentResource::collection($cart_items)]);
    }


    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     *
     * @SWG\Post(
     *     path="/api/cart",
     *     summary="add a equipment to the current constractor's shopping cart",
     *     produces={"application/json"},
     *      tags={"order"},
     *     @SWG\Parameter(
     *          in="header",
     *          name="Authorization",
     *          description ="the authentication token generated by the app",
     *          required=true,
     *          type="string"
     *      ),
     *     @SWG\Parameter(
     *          in="body",
     *          name="equipment",
     *          description ="the id of the equipment that's going to be added to the cart",
     *          required=true,
     *          type="integer",
     *          schema="integer"
     *      ),
     *     @SWG\Response(
     *          response=200,
     *          description="Item added",
     *          @SWG\Schema(
     *              type="object",
     *              @SWG\Property(property="message")
     *          )
     *      ),
     *     @SWG\Response(
     *          response=400,
     *          description="item not found. or The equipment already added to the cart.",
     *          @SWG\Schema(
     *              type="object",
     *              @SWG\Property(property="error_message")
     *          )
     *      ),
     *
     * )
     *
     */
    public function store(itemRequest $request)
    {
      echo "oixxx";
		$res = $this->cart_repository->addEquipment(Auth::user()->id,$request->get('equipment'));
		if($res==-1){
			return response()->json(['message'=>'The equipment already added to the cart.'],400);
		}elseif($res==0){
			return response()->json(['message'=>'item not found.'],400);
		}else{
			return response()->json(['message'=>'Item added'],200);
		}

    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     *
     * @SWG\Delete(
     *     path="/api/cart/{equipment}",
     *     summary="remove the specified equipment from the current constractor's shopping cart",
     *     produces={"application/json"},
     *      tags={"order"},
     *     @SWG\Parameter(
     *          in="header",
     *          name="Authorization",
     *          description ="the authentication token generated by the app",
     *          required=true,
     *          type="string"
     *      ),
     *     @SWG\Parameter(
     *          in="path",
     *          name="equipment",
     *          description ="the id of the equipment that's going to be removed from the cart",
     *          required=true,
     *          type="integer",
     *          schema="integer"
     *      ),
     *     @SWG\Response(
     *          response=200,
     *          description="Item removed",
     *          @SWG\Schema(
     *              type="object",
     *              @SWG\Property(property="message")
     *          )
     *      ),
     *     @SWG\Response(
     *          response=400,
     *          description="item not found.",
     *          @SWG\Schema(
     *              type="object",
     *              @SWG\Property(property="error_message")
     *          )
     *      ),
     *
     * )
     */
    public function destroy(Equipment $cart)
    {
    	$res = $this->cart_repository->removeEquipment(Auth::user()->id,$cart->id);
        if($res){
        	return response()->json(['message'=>'Item deleted'],200);
        }
        return response()->json(['message'=>'Item not in cart']);
    }

	/**
	 * Removes all the items in the shopping cart
	 * @return \Illuminate\Http\JsonResponse
	 * @SWG\Delete(
	 *     path="/api/cart",
	 *     summary="Removes all the items in the shopping cart",
	 *     produces={"application/json"},
	 *      tags={"order"},
	 *     @SWG\Parameter(
	 *          in="header",
	 *          name="Authorization",
	 *          description ="the authentication token generated by the app",
	 *          required=true,
	 *          type="string"
	 *      ),
	 *     @SWG\Response(
	 *          response=200,
	 *          description="cart flushed",
	 *          @SWG\Schema(
	 *              type="object",
	 *              @SWG\Property(property="message")
	 *          )
	 *      ),
	 * )
	 */
    public function flush(){
    	$this->cart_repository->flushCart(Auth::user()->id);
	    return response()->json(['message'=>'Cart content flushed']);
    }
}
